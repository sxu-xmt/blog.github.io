<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python实现文本解析器</title>
      <link href="2021/06/17/Python%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E8%A7%A3%E6%9E%90%E5%99%A8/"/>
      <url>2021/06/17/Python%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E8%A7%A3%E6%9E%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-实现文本解析器"><a href="#Python-实现文本解析器" class="headerlink" title="Python 实现文本解析器 "></a><a href="https://www.lanqiao.cn/courses/70/">Python 实现文本解析器 </a></h1><span id="more"></span><h2 id="一、-内容介绍"><a href="#一、-内容介绍" class="headerlink" title="一、 内容介绍"></a>一、 内容介绍</h2><p>本节实验我们学习使用 Python 来解析纯文本文件，并生成 HTML 页面。本节实验只是一个简单实现，支持了较少部分的 Markdown 语法，但通过实验中的解析实现思路，同学们可以完成更多更复杂的语法解析实现。</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>-Python 基本语法</p><p>-Python 面向对象编程</p><p>-yield 关键字</p><p>-正则表达式</p><p>-HTML 标记语言</p><h2 id="二、实现原理及步骤"><a href="#二、实现原理及步骤" class="headerlink" title="二、实现原理及步骤"></a>二、实现原理及步骤</h2><p>一共有文本块生成器、处理程序、规则、解析和运行与测试五个步骤，本课程中将创建以下的代码文件，每个文件的作用简介如下：</p><p><strong>•util.py</strong>：实现文本块生成器把纯文本分成一个一个的文本块，以便接下来对每一个文本块进行解析</p><p><strong>•handlers.py</strong>：为文本块打上合适的 HTML 标记</p><p><strong>•rules.py</strong>：设计一定的规则来判断每个文本块交给处理程序将要加什么标记</p><p><strong>•markup.py</strong>：对整个文本进行解析的程序</p><h2 id="三、-源代码"><a href="#三、-源代码" class="headerlink" title="三、 源代码"></a>三、 源代码</h2><h3 id="1-util-py"><a href="#1-util-py" class="headerlink" title="1.util.py"></a>1.util.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;处理 TXT 文本，创建返回文本块的生成器</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器函数，函数调用为生成器</span></span><br><span class="line"><span class="comment"># 调用此函数时，file 参数一定是 IOWrapper 对象，IOWrapper 对象是迭代器对象</span></span><br><span class="line"><span class="comment"># 该函数的作用是给文本文件的 IOWrapper 迭代器的末尾增加一个换行符</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lines</span>(<span class="params">file</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成器，在文本最后加一空行</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        <span class="keyword">yield</span> line</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同上一个函数 lines ，它也是个生成器函数</span></span><br><span class="line"><span class="comment"># 调用此函数时，file 参数一定是 IOWrapper 对象，IOWrapper 对象是迭代器对象</span></span><br><span class="line"><span class="comment"># 函数的返回值是生成器，生成器的每次迭代都会返回一个文本块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blocks</span>(<span class="params">file</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成器，将 TXT 文件内容生成一个个单独的文本块，按空行分</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    block = []</span><br><span class="line">    <span class="comment"># 使用 for 循环调用生成器</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines(file):</span><br><span class="line">        <span class="comment"># 如果不是空行</span></span><br><span class="line">        <span class="keyword">if</span> line.strip():</span><br><span class="line">            <span class="comment"># 将该行数据添加到 block 列表里</span></span><br><span class="line">            block.append(line)</span><br><span class="line">        <span class="comment"># 如果是空行，且 block 列表里有内容</span></span><br><span class="line">        <span class="comment"># 这里可以看出 lines 生成器函数的作用了，如果最后一行不是空行</span></span><br><span class="line">        <span class="comment"># 那么最后一个文本块就不会作为 yield 的参数被生成器返回</span></span><br><span class="line">        <span class="keyword">elif</span> block:</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">&#x27;&#x27;</span>.join(block).strip()</span><br><span class="line">            <span class="comment"># 每次生成文本块后，要清空 block 列表</span></span><br><span class="line">            block = []</span><br></pre></td></tr></table></figure><h3 id="2-handlers-py"><a href="#2-handlers-py" class="headerlink" title="2.handlers.py"></a>2.handlers.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">HTML 文本处理类，用于打印各种 HTML 标签</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    处理程序父类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">callback</span>(<span class="params">self, prefix, name, *args</span>):</span></span><br><span class="line">        <span class="comment"># 获取处理方法，getattr 接收三个参数</span></span><br><span class="line">        <span class="comment"># 1、Python 对象</span></span><br><span class="line">        <span class="comment"># 2、属性字符串</span></span><br><span class="line">        <span class="comment"># 3、缺省值</span></span><br><span class="line">        <span class="comment"># 返回值为 Python 对象的属性值，如果没有此属性值，返回第三个参数</span></span><br><span class="line">        method = <span class="built_in">getattr</span>(self, prefix + name, <span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 调用处理方法，将其返回值作为当前函数的返回值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">callable</span>(method): <span class="keyword">return</span> method(*args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.callback(<span class="string">&#x27;start_&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.callback(<span class="string">&#x27;end_&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参数 name 的值为过滤器名字，是字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sub</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">substitution</span>(<span class="params">match</span>):</span></span><br><span class="line">            result = self.callback(<span class="string">&#x27;sub_&#x27;</span>, name, match)</span><br><span class="line">            <span class="keyword">if</span> result <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                result = match.group(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> substitution</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTMLRenderer</span>(<span class="params">Handler</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    HTML 处理程序，给文本块加相应的 HTML 标记</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下各个方法分别在符合条件时被调用，打印标签或标签的 text 值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_document</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;ShiYanLou&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end_document</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;/body&gt;&lt;/html&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_paragraph</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;p style=&quot;color: #444;&quot;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end_paragraph</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;/p&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_heading</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;h2 style=&quot;color: #68BE5D;&quot;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end_heading</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;/h2&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;ul style=&quot;color: #363736;&quot;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;/ul&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_listitem</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;li&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end_listitem</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;/li&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_title</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;h1 style=&quot;color: #1ABC9C;&quot;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end_title</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;/h1&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sub_emphasis</span>(<span class="params">self, match</span>):</span></span><br><span class="line">        <span class="keyword">return</span>(<span class="string">&#x27;&lt;em&gt;%s&lt;/em&gt;&#x27;</span> % match.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sub_url</span>(<span class="params">self, match</span>):</span></span><br><span class="line">        s = (<span class="string">&#x27;&lt;a target=&quot;_blank&quot; style=&quot;text-decoration: none;&#x27;</span></span><br><span class="line">                <span class="string">&#x27;color: #BC1A4B;&quot; href=&quot;&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">format</span>(match.group(<span class="number">1</span>), match.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sub_mail</span>(<span class="params">self, match</span>):</span></span><br><span class="line">        s = (<span class="string">&#x27;&lt;a style=&quot;text-decoration: none;color: #BC1A4B;&quot; &#x27;</span></span><br><span class="line">                <span class="string">&#x27;href=&quot;mailto:&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">format</span>(match.group(<span class="number">1</span>), match.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feed</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h3 id="3-rules-py"><a href="#3-rules-py" class="headerlink" title="3.rules.py"></a>3.rules.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;处理文本块的规则类，所有类均为单例模式，在程序运行时除了 Rule 每个类仅创建一个实例</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rule</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    所有规则类的父类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">self, block, handler</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        加标记，以下三行执行打印 HTML 标签的功能</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        handler.start(self.<span class="built_in">type</span>)    <span class="comment"># 打印标签头</span></span><br><span class="line">        handler.feed(block)         <span class="comment"># 打印标签 text 部分</span></span><br><span class="line">        handler.end(self.<span class="built_in">type</span>)      <span class="comment"># 打印标签尾</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>                 <span class="comment"># 打印完成，返回 True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeadingRule</span>(<span class="params">Rule</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    一号标题规则，HTML 文件的一级标题规则（最大字号）&lt;h1&gt; 标签</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&#x27;heading&#x27;</span>    <span class="comment"># 文本块类型</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">condition</span>(<span class="params">self, block</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        判断文本块是否符合规则，返回值为布尔值 True 或 False</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> <span class="string">&#x27;\n&#x27;</span> <span class="keyword">in</span> block <span class="keyword">and</span> <span class="built_in">len</span>(block) &lt;= <span class="number">70</span> <span class="keyword">and</span> <span class="keyword">not</span> block[-<span class="number">1</span>] == <span class="string">&#x27;:&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleRule</span>(<span class="params">HeadingRule</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    二号标题规则，次级标题规则，继承一号标题规则类 &lt;h2&gt; 标签</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&#x27;title&#x27;</span>  <span class="comment"># 文本块类型</span></span><br><span class="line">    first = <span class="literal">True</span>    <span class="comment"># 这是一个浮动值</span></span><br><span class="line">                    <span class="comment"># 首次调用该类的实例，该值为 True</span></span><br><span class="line">                    <span class="comment"># 之后调用该类的实例，该值为 False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">condition</span>(<span class="params">self, block</span>):</span></span><br><span class="line">        <span class="comment"># 以下三行代码保证在首次调用该类实例和后续调用时 first 的值不同</span></span><br><span class="line">        <span class="comment"># 符合一号标题规则的文本块一定符合二号标题规则，它们只有先后次序这一个区别</span></span><br><span class="line">        <span class="comment"># 首次调用时返回 False ，即代码块不符合二号标题规则</span></span><br><span class="line">        <span class="comment"># 之后调用返回 True ，即使用该类的 action 方法进行处理</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.first:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.first = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().condition(block)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListItemRule</span>(<span class="params">Rule</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    列表项规则，&lt;li&gt; 标签</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&#x27;listitem&#x27;</span>   <span class="comment"># 文本块类型</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">condition</span>(<span class="params">self, block</span>):</span></span><br><span class="line">        <span class="comment"># 行首为减号，则该代码块符合列表项规则</span></span><br><span class="line">        <span class="keyword">return</span> block[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">self, block, handler</span>):</span></span><br><span class="line">        handler.start(self.<span class="built_in">type</span>)        <span class="comment"># 打印 &lt;li&gt; 标签头</span></span><br><span class="line">        handler.feed(block[<span class="number">1</span>:].strip()) <span class="comment"># 打印 &lt;li&gt; 标签的 text 部分，注意去掉减号</span></span><br><span class="line">        handler.end(self.<span class="built_in">type</span>)          <span class="comment"># 打印 &lt;li&gt; 标签尾</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>                     <span class="comment"># 处理完毕，返回 True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListRule</span>(<span class="params">ListItemRule</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    列表规则，&lt;ul&gt; 标签</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&#x27;list&#x27;</span>   <span class="comment"># 文本块类型</span></span><br><span class="line">    inside = <span class="literal">False</span>  <span class="comment"># 该值亦为浮动值，判断是否为列表规则</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">condition</span>(<span class="params">self, block</span>):</span></span><br><span class="line">        <span class="comment"># 判断代码块是否符合规则这里返回 True</span></span><br><span class="line">        <span class="comment"># 在 action 方法中调用父类的同名方法再次判断</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">self, block, handler</span>):</span></span><br><span class="line">        <span class="comment"># 如果 self.inside 为 False 且父类的 condition 方法返回值为 True</span></span><br><span class="line">        <span class="comment"># 第一次出现符合列表项规则的文本块时，满足这两个要求</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.inside <span class="keyword">and</span> <span class="built_in">super</span>().condition(block):</span><br><span class="line">            <span class="comment"># 打印 &lt;ul&gt; 标签头</span></span><br><span class="line">            handler.start(self.<span class="built_in">type</span>)</span><br><span class="line">            <span class="comment"># 将 inside 属性值改为 True</span></span><br><span class="line">            self.inside = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 打印一堆连续 li 标签后，出现非列表项规则的文本块</span></span><br><span class="line">        <span class="keyword">elif</span> self.inside <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">super</span>().condition(block):</span><br><span class="line">            <span class="comment"># 打印 &lt;ul&gt; 标签尾</span></span><br><span class="line">            handler.end(self.<span class="built_in">type</span>)</span><br><span class="line">            <span class="comment"># 再次修改 inside 属性为 False</span></span><br><span class="line">            self.inside = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 该方法只用于在合适的条件下打印 &lt;ul&gt; 标签</span></span><br><span class="line">        <span class="comment"># 永远返回 False ，以调用其它规则实例继续处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParagraphRule</span>(<span class="params">Rule</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    段落规则，&lt;p&gt; 标签</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">&#x27;paragraph&#x27;</span>  <span class="comment"># 文本块类型</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">condition</span>(<span class="params">self, block</span>):</span></span><br><span class="line">        <span class="comment"># 不符合以上各类的判断规则的代码块一律按此规则处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意这个列表中实例的顺序不能随意改动，原因参见相应类中的注释说明</span></span><br><span class="line">rule_list = [ListRule(), ListItemRule(), TitleRule(), HeadingRule(),</span><br><span class="line">        ParagraphRule()]</span><br></pre></td></tr></table></figure><p>###4.markup.py</p><figure class="highlight plaintext"><figcaption><span>-*- coding: UTF-8 -*-</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">import sys, re</span><br><span class="line">from handlers import HTMLRenderer</span><br><span class="line">from util import blocks</span><br><span class="line">from rules import rule_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Parser:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    解析器父类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, handler):</span><br><span class="line">        self.handler = handler</span><br><span class="line">        self.rules = []     # 判断文本块规则的实例列表</span><br><span class="line">        self.filters = []   # 过滤方法列表</span><br><span class="line"></span><br><span class="line">    def addRule(self, rule):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        向 self.rules 列表中添加规则类的实例</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.rules.append(rule)</span><br><span class="line"></span><br><span class="line">    def addFilter(self, pattern, name):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        向 self.filters 列表中添加过滤函数</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 该过滤器函数接收两个参数：文本块和 HTMLRenderer 类的实例</span><br><span class="line">        def filter(block, handler):</span><br><span class="line">            # re.sub 接收三个参数 a b c ，将字符串 c 中的 a 字段替换成 b</span><br><span class="line">            # b 的值可以是字符串或函数</span><br><span class="line">            # 在下一行代码中 b 参数的值为 handler 的 sub 方法的返回值</span><br><span class="line">            # sub 方法的参数 name 的值为字符串，它和 &#x27;sub_&#x27; 组成一个大字符串</span><br><span class="line">            # 大字符串就是 handler 的一个方法名</span><br><span class="line">            return re.sub(pattern, handler.sub(name), block)</span><br><span class="line">        self.filters.append(filter)</span><br><span class="line"></span><br><span class="line">    def parse(self, file):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        核心方法，解析文本，打印符合要求的标签，写入新的文件中</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 调用 handler 实例的 start 方法，参数为 handler 实例的某个方法名的一部分</span><br><span class="line">        # 结果就是调用 handler 的 start_document 方法，打印文档的 head 标签</span><br><span class="line">        self.handler.start(&#x27;document&#x27;)</span><br><span class="line">        # blocks 是从 urti.py 文件引入的生成器函数</span><br><span class="line">        # blocks(file) 就是一个生成器</span><br><span class="line">        # 使用 for 循环生成器</span><br><span class="line">        for block in blocks(file):</span><br><span class="line">            # 调用过滤器，对每个文本块进行处理</span><br><span class="line">            for filter in self.filters:</span><br><span class="line">                block = filter(block, self.handler)</span><br><span class="line">            # 循环规则类的实例</span><br><span class="line">            for rule in self.rules:</span><br><span class="line">                # 如果符合规则，调用实例的 action 方法打印标签</span><br><span class="line">                if rule.condition(block):</span><br><span class="line">                    last = rule.action(block, self.handler)</span><br><span class="line">                    # 如果 action 方法的返回值为 True</span><br><span class="line">                    # 表示该文本块处理完毕，结束循环</span><br><span class="line">                    if last:</span><br><span class="line">                        break</span><br><span class="line">        # 同 self.handler.start</span><br><span class="line">        # 调用 handler 的 end_document 方法打印 &#x27;&lt;/body&gt;&lt;/html&gt;&#x27;</span><br><span class="line">        self.handler.end(&#x27;document&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BasicTextParser(Parser):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    纯文本解析器</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, handler):</span><br><span class="line">        # 运行父类 Parser 的同名方法</span><br><span class="line">        super().__init__(handler)</span><br><span class="line">        # 增加规则类的实例到 self.urls 列表</span><br><span class="line">        for rule in rule_list:</span><br><span class="line">            self.addRule(rule)</span><br><span class="line">        # 增加三个过滤函数，分别处理斜体字段、链接和邮箱</span><br><span class="line">        self.addFilter(r&#x27;\*(.+?)\*&#x27;, &#x27;emphasis&#x27;)</span><br><span class="line">        self.addFilter(r&#x27;(http://[\.a-zA-Z/]+)&#x27;, &#x27;url&#x27;)</span><br><span class="line">        self.addFilter(r&#x27;([\.a-zA-Z]+@[\.a-zA-Z]+[a-zA-Z]+)&#x27;, &#x27;mail&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    主函数，控制整个程序的运行</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    handler = HTMLRenderer()</span><br><span class="line">    parser = BasicTextParser(handler)</span><br><span class="line">    # 将文件内容作为标准输入，sys.stdin 获取标准输入的内容，生成 IOWrapper 迭代器对象</span><br><span class="line">    parser.parse(sys.stdin)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="四、-结果及分析"><a href="#四、-结果及分析" class="headerlink" title="四、 结果及分析"></a>四、 结果及分析</h2><p> 在这个小程序中，我们使用了 Python 来解析纯文本文件并生成 HTML 文件，这个只是简单实现，支持了很少部分的 Markdown 语法，通过这个案例大家可以动手试试解析完整的 Markdown 文件。<br><img data-src="https://img-blog.csdnimg.cn/img_convert/7deabee8376b85861440a40a93af0f4c.png" alt="图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>四六级答案</title>
      <link href="2021/06/12/%E5%9B%9B%E5%85%AD%E7%BA%A7%E7%AD%94%E6%A1%88/"/>
      <url>2021/06/12/%E5%9B%9B%E5%85%AD%E7%BA%A7%E7%AD%94%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>(点👉)<a href="http://mp.weixin.qq.com/s?__biz=Mzk0NDE4MjM5Mg==&mid=100000027&idx=1&sn=12da22c15d1a069b5b3f617d0859d699&chksm=4329c40c745e4d1a8fc9ba94c1739750ca362e983aeec87d2246292c0e5b50b5a4f658b63d6c&mpshare=1&scene=23&srcid=0612AdTe5l0FxaVNLwgFefgs&sharer_sharetime=1623473761114&sharer_shareid=607d95b460436718ba01b46fbb316f57#rd">四级答案</a><br>下午六级结束会有六级答案</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>发文章步骤</title>
      <link href="2021/05/28/%E5%8F%91%E6%96%87%E7%AB%A0%E6%AD%A5%E9%AA%A4/"/>
      <url>2021/05/28/%E5%8F%91%E6%96%87%E7%AB%A0%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="发文章的步骤"><a href="#发文章的步骤" class="headerlink" title="发文章的步骤"></a>发文章的步骤</h2><span id="more"></span><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇blog</title>
      <link href="2021/05/28/%E7%AC%AC%E4%B8%80%E7%AF%87blog/"/>
      <url>2021/05/28/%E7%AC%AC%E4%B8%80%E7%AF%87blog/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到<a href="https://shineme.ltd/">Shineme的世界</a>，这里是我的博客，也欢迎小伙伴们访问我的<a href="http://xmt.shineme.ltd/">个人主页</a> or you can ask me on <a href="https://github.com/xmt3061123">GitHub</a>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
